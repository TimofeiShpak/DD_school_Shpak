const { src, dest, watch, parallel, series } = require('gulp');
const sass = require('gulp-sass')(require('sass'));
const browserSync = require('browser-sync');
const bro = require('gulp-bro'); // для работы с модулями
const rename = require('gulp-rename'); // для переименования файла
const babelify = require('babelify'); // для работы с последней версией языка

function html() {
	return src('src/index.html')
		.pipe(dest('dist'))
		.pipe(browserSync.reload({ stream: true }));
}

function js() {
	return src('src/js/module.js')
		.pipe(bro({transform: [babelify.configure({ presets: ['@babel/preset-env'] })] })) // собираем модули в один файл
		.pipe(rename('index.js')) // переименовываем файл
		.pipe(dest('dist'))
		.pipe(browserSync.reload({ stream: true }));
}
 
function taskSass(){
	return src('src/scss/style.scss')
		.pipe(sass())
		.pipe(dest('dist'))
		.pipe(browserSync.reload({stream: true}));
}
 
function taskBrowserSync() {
	browserSync({
		server: {
			baseDir: 'dist'
		},
		notify: false
	});
}
 
function taskWatch() {
	watch('src/index.html', parallel(html));
	watch('src/js/**/*.js', parallel(js));
	watch('src/scss/**/*.scss', parallel(taskSass));
}

exports.start = parallel(series(parallel(html, taskSass, js), taskBrowserSync), taskWatch)

// npm i gulp-bro gulp-rename babelify @babel/preset-env @babel/core --save-dev